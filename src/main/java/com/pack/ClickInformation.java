/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pack;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ClickInformation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7147382250607552971L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClickInformation\",\"namespace\":\"com.pack\",\"fields\":[{\"name\":\"sessionid\",\"type\":\"string\"},{\"name\":\"browser\",\"type\":[\"string\",\"null\"]},{\"name\":\"campaign\",\"type\":[\"string\",\"null\"]},{\"name\":\"channel\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":[\"string\",\"null\"],\"default\":\"none\"},{\"name\":\"ip\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ClickInformation> ENCODER =
      new BinaryMessageEncoder<ClickInformation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClickInformation> DECODER =
      new BinaryMessageDecoder<ClickInformation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ClickInformation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ClickInformation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClickInformation>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ClickInformation to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ClickInformation from a ByteBuffer. */
  public static ClickInformation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence sessionid;
  @Deprecated public java.lang.CharSequence browser;
  @Deprecated public java.lang.CharSequence campaign;
  @Deprecated public java.lang.CharSequence channel;
  @Deprecated public java.lang.CharSequence referrer;
  @Deprecated public java.lang.CharSequence ip;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClickInformation() {}

  /**
   * All-args constructor.
   * @param sessionid The new value for sessionid
   * @param browser The new value for browser
   * @param campaign The new value for campaign
   * @param channel The new value for channel
   * @param referrer The new value for referrer
   * @param ip The new value for ip
   */
  public ClickInformation(java.lang.CharSequence sessionid, java.lang.CharSequence browser, java.lang.CharSequence campaign, java.lang.CharSequence channel, java.lang.CharSequence referrer, java.lang.CharSequence ip) {
    this.sessionid = sessionid;
    this.browser = browser;
    this.campaign = campaign;
    this.channel = channel;
    this.referrer = referrer;
    this.ip = ip;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sessionid;
    case 1: return browser;
    case 2: return campaign;
    case 3: return channel;
    case 4: return referrer;
    case 5: return ip;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sessionid = (java.lang.CharSequence)value$; break;
    case 1: browser = (java.lang.CharSequence)value$; break;
    case 2: campaign = (java.lang.CharSequence)value$; break;
    case 3: channel = (java.lang.CharSequence)value$; break;
    case 4: referrer = (java.lang.CharSequence)value$; break;
    case 5: ip = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sessionid' field.
   * @return The value of the 'sessionid' field.
   */
  public java.lang.CharSequence getSessionid() {
    return sessionid;
  }

  /**
   * Sets the value of the 'sessionid' field.
   * @param value the value to set.
   */
  public void setSessionid(java.lang.CharSequence value) {
    this.sessionid = value;
  }

  /**
   * Gets the value of the 'browser' field.
   * @return The value of the 'browser' field.
   */
  public java.lang.CharSequence getBrowser() {
    return browser;
  }

  /**
   * Sets the value of the 'browser' field.
   * @param value the value to set.
   */
  public void setBrowser(java.lang.CharSequence value) {
    this.browser = value;
  }

  /**
   * Gets the value of the 'campaign' field.
   * @return The value of the 'campaign' field.
   */
  public java.lang.CharSequence getCampaign() {
    return campaign;
  }

  /**
   * Sets the value of the 'campaign' field.
   * @param value the value to set.
   */
  public void setCampaign(java.lang.CharSequence value) {
    this.campaign = value;
  }

  /**
   * Gets the value of the 'channel' field.
   * @return The value of the 'channel' field.
   */
  public java.lang.CharSequence getChannel() {
    return channel;
  }

  /**
   * Sets the value of the 'channel' field.
   * @param value the value to set.
   */
  public void setChannel(java.lang.CharSequence value) {
    this.channel = value;
  }

  /**
   * Gets the value of the 'referrer' field.
   * @return The value of the 'referrer' field.
   */
  public java.lang.CharSequence getReferrer() {
    return referrer;
  }

  /**
   * Sets the value of the 'referrer' field.
   * @param value the value to set.
   */
  public void setReferrer(java.lang.CharSequence value) {
    this.referrer = value;
  }

  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Creates a new ClickInformation RecordBuilder.
   * @return A new ClickInformation RecordBuilder
   */
  public static com.pack.ClickInformation.Builder newBuilder() {
    return new com.pack.ClickInformation.Builder();
  }

  /**
   * Creates a new ClickInformation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClickInformation RecordBuilder
   */
  public static com.pack.ClickInformation.Builder newBuilder(com.pack.ClickInformation.Builder other) {
    return new com.pack.ClickInformation.Builder(other);
  }

  /**
   * Creates a new ClickInformation RecordBuilder by copying an existing ClickInformation instance.
   * @param other The existing instance to copy.
   * @return A new ClickInformation RecordBuilder
   */
  public static com.pack.ClickInformation.Builder newBuilder(com.pack.ClickInformation other) {
    return new com.pack.ClickInformation.Builder(other);
  }

  /**
   * RecordBuilder for ClickInformation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClickInformation>
    implements org.apache.avro.data.RecordBuilder<ClickInformation> {

    private java.lang.CharSequence sessionid;
    private java.lang.CharSequence browser;
    private java.lang.CharSequence campaign;
    private java.lang.CharSequence channel;
    private java.lang.CharSequence referrer;
    private java.lang.CharSequence ip;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pack.ClickInformation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sessionid)) {
        this.sessionid = data().deepCopy(fields()[0].schema(), other.sessionid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.browser)) {
        this.browser = data().deepCopy(fields()[1].schema(), other.browser);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.campaign)) {
        this.campaign = data().deepCopy(fields()[2].schema(), other.campaign);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.channel)) {
        this.channel = data().deepCopy(fields()[3].schema(), other.channel);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.referrer)) {
        this.referrer = data().deepCopy(fields()[4].schema(), other.referrer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ip)) {
        this.ip = data().deepCopy(fields()[5].schema(), other.ip);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ClickInformation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pack.ClickInformation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sessionid)) {
        this.sessionid = data().deepCopy(fields()[0].schema(), other.sessionid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.browser)) {
        this.browser = data().deepCopy(fields()[1].schema(), other.browser);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.campaign)) {
        this.campaign = data().deepCopy(fields()[2].schema(), other.campaign);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.channel)) {
        this.channel = data().deepCopy(fields()[3].schema(), other.channel);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.referrer)) {
        this.referrer = data().deepCopy(fields()[4].schema(), other.referrer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ip)) {
        this.ip = data().deepCopy(fields()[5].schema(), other.ip);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'sessionid' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionid() {
      return sessionid;
    }

    /**
      * Sets the value of the 'sessionid' field.
      * @param value The value of 'sessionid'.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder setSessionid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sessionid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionid' field has been set.
      * @return True if the 'sessionid' field has been set, false otherwise.
      */
    public boolean hasSessionid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sessionid' field.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder clearSessionid() {
      sessionid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'browser' field.
      * @return The value.
      */
    public java.lang.CharSequence getBrowser() {
      return browser;
    }

    /**
      * Sets the value of the 'browser' field.
      * @param value The value of 'browser'.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder setBrowser(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.browser = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'browser' field has been set.
      * @return True if the 'browser' field has been set, false otherwise.
      */
    public boolean hasBrowser() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'browser' field.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder clearBrowser() {
      browser = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'campaign' field.
      * @return The value.
      */
    public java.lang.CharSequence getCampaign() {
      return campaign;
    }

    /**
      * Sets the value of the 'campaign' field.
      * @param value The value of 'campaign'.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder setCampaign(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.campaign = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'campaign' field has been set.
      * @return True if the 'campaign' field has been set, false otherwise.
      */
    public boolean hasCampaign() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'campaign' field.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder clearCampaign() {
      campaign = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'channel' field.
      * @return The value.
      */
    public java.lang.CharSequence getChannel() {
      return channel;
    }

    /**
      * Sets the value of the 'channel' field.
      * @param value The value of 'channel'.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder setChannel(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.channel = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'channel' field has been set.
      * @return True if the 'channel' field has been set, false otherwise.
      */
    public boolean hasChannel() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'channel' field.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder clearChannel() {
      channel = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'referrer' field.
      * @return The value.
      */
    public java.lang.CharSequence getReferrer() {
      return referrer;
    }

    /**
      * Sets the value of the 'referrer' field.
      * @param value The value of 'referrer'.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder setReferrer(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.referrer = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'referrer' field has been set.
      * @return True if the 'referrer' field has been set, false otherwise.
      */
    public boolean hasReferrer() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'referrer' field.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder clearReferrer() {
      referrer = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public java.lang.CharSequence getIp() {
      return ip;
    }

    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.ip = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public com.pack.ClickInformation.Builder clearIp() {
      ip = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClickInformation build() {
      try {
        ClickInformation record = new ClickInformation();
        record.sessionid = fieldSetFlags()[0] ? this.sessionid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.browser = fieldSetFlags()[1] ? this.browser : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.campaign = fieldSetFlags()[2] ? this.campaign : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.channel = fieldSetFlags()[3] ? this.channel : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.referrer = fieldSetFlags()[4] ? this.referrer : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.ip = fieldSetFlags()[5] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClickInformation>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClickInformation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClickInformation>
    READER$ = (org.apache.avro.io.DatumReader<ClickInformation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
